import React from "react";
import { useEffect, useState } from "react";
import { Layout, battlesData } from "./start";
import { Fade } from "@mui/material";
import axios from "axios";
import ReactPlayer from "react-player";
import ReactTyped from "react-typed";

const GO = () => {
  // Á∂≤ÂùÄÂèÉÊï∏
  const [parsed, setParsed] = useState(null);
  const [player, setPlayer] = useState(null);
  const [side, setSide] = useState(null);
  const [difficulty, setDifficulty] = useState(null);
  const [boardSize, setBoardSize] = useState(null);
  const [battle, setBattle] = useState(null);
  const [whoFirst, setWhoFirst] = useState(null);

  const [currentState, setCurrentState] = useState(null);
  const [moves, setMoves] = useState(null);
  const [gameLog, setGameLog] = useState([]);
  const [aiThinking, setAIThinking] = useState(false);
  const [aiResponse, setAiResponse] = useState(null);
  const [screenWriting, setScreenWriting] = useState([]);

  //Ëß£ÊûêÁ∂≤ÂùÄÂèÉÊï∏
  useEffect(() => {
    if (!parsed) {
      const urlParams = new URLSearchParams(window.location.search);
      const _player = urlParams.get("player");
      const _side = urlParams.get("side");
      const _difficulty = urlParams.get("difficulty");
      const _boardSize = urlParams.get("boardSize");
      const _battle = battlesData.find(
        (b) => `${b.id}` === `${urlParams.get("id")}`
      );
      setPlayer(_player);
      setSide(_side);
      setDifficulty(_difficulty);
      setBoardSize(_boardSize);
      setBattle(_battle);
      setWhoFirst(_side === "1" ? "Player" : "AI");
      setScreenWriting([
        {
          img: _battle.img,
          description: _battle?.description,
        },
      ]);

      setTimeout(() => {
        setParsed(true);
      }, 50);
    }
  }, []);

  //ÂàùÂßãÂåñÊ£ãÁõ§
  useEffect(() => {
    if (parsed) {
      // Ê∏ÖÁ©∫
      document.querySelector(".tenuki-board").innerHTML = "";

      // Êñ∞ÁöÑÊ£ãÁõò github.com/aprescott/tenuki
      var boardElement = document.querySelector(".tenuki-board");
      var game = new tenuki.Game({
        element: boardElement,
        komi: 6.5,
        scoring: "area",
        boardSize: Number(boardSize),
      });
      setCurrentState(game.currentState());

      // callback
      game.callbacks.postRender = function (game) {
        // Ë®≠ÂÆö state
        let _game = game.currentState();
        setCurrentState(_game);
      };
    }
  }, [parsed]);

  //Ëá™Ë°åË®òÈåÑ moves Ê≠∑Âè≤Ôºå‰ª•‰æõ API ‰ΩøÁî®
  useEffect(() => {
    if (currentState) {
      console.log("> currentState", currentState);
      setMoves(moveAccFunction(moves, currentState));
    }
  }, [currentState]);
  useEffect(() => {
    if (moves) {
      console.log("> moves", moves);
    }
  }, [moves]);

  //Êõ¥Êñ∞ Log
  const handleAddGameLog = (string) => {
    setGameLog([...gameLog, string]);
  };
  //ÂáΩÂºèÁôºÈÄÅÊ£ãË≠úÁµ¶ AI
  const handleGetAIMove = async () => {
    //Êï¥ÁêÜÊ£ãË≠ú
    const format = () => {
      return moves.map((m) => {
        const revert = convertArrayIndexToGoPosition(
          m.y,
          m.x,
          currentState.boardSize
        );
        return `("${m?.color?.charAt(0)}",(${revert[0]}, ${revert[1]}))`;
      });
    };
    let payload = format();
    payload = `[${payload.join(",")}]`; //Áµ¶ API ÁúãÁöÑÊ£ãË≠ú

    //Â∏∏Êï∏
    const playerColor = side === "1" ? "black" : "white";
    const aiColor = side === "1" ? "white" : "black";
    const lastColor = moves[moves.length - 1]?.color;
    const waitForAIString = "AI is thinking... ü§î";
    const waitForPlayerString = `It's your turn „Äé${player}„Äè`;

    //API Ë´ãÊ±Ç
    const fetchAI = async () => {
      setAIThinking(true);
      try {
        //ÂäáÊú¨ÊèêÁ§∫Ë©û
        let _newScreenWriting;
        const screenWritingTemplate = `ÈÄôÊòØ‰∏ÄÂ†¥ÂúçÊ£ãÊØîË≥ΩÔºåËÄå‰Ω†ÁöÑ‰ªªÂãôÂ∞±ÊòØËΩâË≠ØÔºåÊääÊ£ãÁõ§‰∏äÁöÑÂ±ÄÂã¢ÊèèËø∞ÊàêÊ≠∑Âè≤‰∏äÁöÑÊà∞ÂΩπ

Áé©ÂÆ∂ÁöÑÂêçÁ®±ÊòØ ${player} ‰ª£Ë°® ${playerColor} ÊñπÔºåÂ∞çÊâãÊòØ AI ‰ª£Ë°® ${aiColor} ÊñπÔºåÁî± ${whoFirst} ÂÖàÊâã

${
  aiResponse
    ? `Â∞çÊâã‰∏ãÂú®‰∫Ü ${aiResponse.next_move_number_format} ‰ΩçÁΩÆÔºåÁõÆÂâçÁöÑÂ±ÄÂã¢ÊòØ ${aiResponse?.score_lead}ÔºåÂãùÁéáÂàÜÂà•ÊòØÈªëÔºö${aiResponse?.black_win_rate} ËàáÁôΩÔºö${aiResponse?.white_win_rate}Ôºå`
    : ""
}

ÁõÆÂâçÁöÑÊ£ãÁõ§ÊòØ 
${
  currentState?.intersections &&
  visualizeGoBoard(currentState?.intersections, currentState.boardSize)
}

${
  currentState?.playedPoint
    ? `Áé©ÂÆ∂‰∏ãÂú®‰∫Ü [${currentState?.playedPoint.x}, ${currentState?.playedPoint.y}] ÁöÑ‰ΩçÁΩÆ`
    : ""
}

Êà∞ÂΩπÁöÑÈÉ®ÂàÜÊòØ ${battle.name}

ÈªëÊñπÊòØ ${battle.black}ÔºåÁôΩÊñπÊòØ ${battle.white}

${
  screenWriting.length > 0 &&
  `ÂÖàÂâçÊúâ‰ª•‰∏ãÂäáÊÉÖ
${screenWriting.map((s, index) => `${index}.${s.description}`).join("\n")}`
}

Êé•‰∏ã‰æÜË´ã‰Ω†‰ΩøÁî®ÂúçÊ£ãÁöÑË¶èÂâáËàáÊÉ≥ÂÉèÂäõÔºåÊääÁï∂ÂâçÁöÑÊà∞Ê≥ÅÂäáÊÉÖÊèèËø∞Âá∫‰æÜÔºå‰∏¶Êèê‰æõË©≤ÂäáÊÉÖÂ†¥ÊôØÊâÄÈúÄÁöÑÂúñÁâáÊèêÁ§∫Ë©ûÔºå

description: 30Â≠óÁöÑËã±Êñá
imgPrompt: Êê≠ÈÖçÂäáÊÉÖÁöÑÁîüÊàêÂúñÁâáÊèêÁ§∫Ë©ûÔºåË´ã‰Ω†Êê≠ÈÖç‰ΩøÁî®Ê≠§Âü∫Êú¨È¢®Ê†º sketch style, black and white illustration, soft pencil lines, minimalist details, vintage look, beige background

Âè¶Â§ñÂ∞±ÊòØÂúñÁâáÊèêÁ§∫Ë©ûÂèØËÉΩË¶ÅÊ≥®ÊÑèÂÆâÂÖ®ÊîøÁ≠ñ(Safe Policy)ÔºåÂú®‰∏çÂΩ±ÈüøÁîüÊàêÂúñÁâáÁöÑÁ≤æÂΩ©Â∫¶‰πã‰∏ãÔºåÈÅøÂÖç‰∏Ä‰∫õÈÅéÊñºÁ¥∞ÁØÄÊö¥Âäõ„ÄÅË°ÄËÖ•ÁöÑÂ†¥ÊôØ

ÊúÄÂæåË´ã‰Ω†Áõ¥Êé•ÂõûÊáâ JSON Ê†ºÂºèÁöÑÂ≠ó‰∏≤Ôºå‰æãÂ¶Ç‰∏ãÊñπ

{
    description: ""
    imgPrompt: ""
}
`;
        console.log("> screenWritingTemplate", screenWritingTemplate);

        //ÁîüÊàêÂäáÊú¨ËàáÂúñÁâáÊèêÁ§∫Ë©û
        await axios
          .post("/api/claude_call2", {
            prompts: [
              {
                role: "user",
                content: `${screenWritingTemplate}`,
              },
            ],
          })
          .then((res) => {
            const parsed = JSON.parse(res.data.payload.text);
            const { description, imgPrompt } = parsed;
            _newScreenWriting = {
              imgPrompt,
              description,
            };
          })
          .catch((err) => {
            alert("> ScreenWriting error");
          });

        //ÁîüÊàêÂúñÁâá
        await axios
          .post("/api/openai_sprint", {
            type: "image",
            prompt: _newScreenWriting.imgPrompt,
          })
          .then((res) => {
            const img = res.data.data[0].url;
            _newScreenWriting = {
              ..._newScreenWriting,
              img,
            };
          })
          .catch((err) => {
            alert("> ImageGenerating error");
          });

        //Êõ¥Êñ∞ÂäáÊÉÖ
        setScreenWriting([...screenWriting, _newScreenWriting]);

        //ÂèñÂæó AI Ê£ãÁõ§ÂõûÊáâ
        await axios
          .post(`https://swapgo.yosgo.com/ana`, {
            moves: payload,
          })
          .then((res) => {
            let ana = res.data;
            let pass = `${ana.next_move}`.indexOf("pass") !== -1;
            //‰æùÁÖßÈõ£Â∫¶Ë®àÁÆó‰∏ã‰∏ÄÊ≠•ÁöÑÊï∏Â≠óÊ†ºÂºè
            let next_move_number_format;
            let next_move_text_format;
            let next_move_english_format;
            if (!pass && ana?.top_moves?.length > 0) {
              const { top_moves } = ana;
              let selected_move = top_moves[Number(difficulty)];
              if (selected_move) {
                next_move_english_format = selected_move.move.substring(0, 2);
                next_move_number_format = convertMove(
                  selected_move.move.substring(0, 2)
                );
                next_move_text_format = `${selected_move.move} probability: ${selected_move.probability}`;
              }
            }
            ana = {
              ...ana,
              pass,
              next_move_english_format,
              next_move_number_format,
              next_move_text_format,
            };
            setAiResponse(ana);
          })
          .catch((err) => {
            alert("KataGo error");
            console.log("> fetchAI error", err);
          });

        //AI ÁµêÊùüÊÄùËÄÉ
        setAIThinking(false);
      } catch (err) {
        console.log("> fetchAI error", err);
      }
    };

    //‰∏ãÊ£ãÈ†ÜÂ∫èÂà§Êñ∑
    if (moves.length === 0) {
      if (playerColor === "black") {
        handleAddGameLog(waitForPlayerString);
      } else {
        handleAddGameLog(waitForAIString);
        await fetchAI();
      }
    } else {
      if (playerColor !== lastColor) {
        handleAddGameLog(waitForPlayerString);
      } else {
        handleAddGameLog(waitForAIString);
        await fetchAI();
      }
    }
  };
  //Âü∑Ë°åËá™Âãï‰∏ãÊ£ã
  useEffect(() => {
    (async () => {
      if (parsed && moves) {
        await handleGetAIMove();
      }
    })();
  }, [moves, parsed]);
  //ÂèñÂæó AI ÂõûÊáâÔºåÊõ¥Êñ∞Ê£ãÁõ§„ÄÅÂà§Êñ∑ÂãùË≤†
  useEffect(() => {
    if (
      aiResponse &&
      aiResponse?.next_move_number_format &&
      !aiResponse?.pass
    ) {
      console.log("> aiResponse", aiResponse);
      const x = aiResponse.next_move_number_format[0];
      const y = aiResponse.next_move_number_format[1];
      const intersection = document.querySelector(
        `.intersection[data-intersection-x="${x}"][data-intersection-y="${y}"]`
      );
      if (intersection) {
        const event = new MouseEvent("click", {
          bubbles: true,
          cancelable: true,
          view: window,
        });
        intersection.dispatchEvent(event);
      } else {
        console.error(`Ê≤íÊúâÊâæÂà∞ÂùêÊ®ôÁÇ∫ (${x}, ${y}) ÁöÑ‰∫§ÂèâÈªûÂÖÉÁ¥†`);
      }
    } else if (aiResponse && aiResponse?.pass) {
      alert(
        `Game Over. ${aiResponse.score_lead}. 
          
Black: ${aiResponse.black_win_rate}

White: ${aiResponse.white_win_rate}`
      );
    }
  }, [aiResponse]);

  //Áõ£ËÅΩÂäáÊÉÖ
  useEffect(() => {
    console.log("> screenWriting", screenWriting);
  }, [screenWriting]);

  //Ê®£Âºè
  const styles = {
    container: {
      display: "flex",
      width: "100vw",
      minHeight: "100vh",
      overflow: "hidden",
      alignItems: "stretch",
      border: "3px solid rgba(55,55,55,1)",
      boxSize: "border-box",
    },
    leftColumn: {
      display: "flex",
      flexDirection: "column",
      width: "50%",
      height: "calc(100vh - 6px)",
      borderRight: "3px solid rgba(55,55,55,1)",
      display: "flex",
      justifyContent: "space-between",
      flexDirection: "column",
      boxSize: "border-box",
    },
    rightColumn: {
      width: "50%",
      height: "calc(100vh - 6px)",
      position: "relative",
    },
    leftTop: {
      overflow: "auto",
      boxSize: "border-box",
      padding: "8px 16px",
    },
    leftBottom: {
      borderTop: "3px solid rgba(55,55,55,1)",
      boxSize: "border-box",
      position: "relative",
    },
  };

  return (
    <Layout>
      <style jsx>
        {`
          .swap-go-board {
            width: calc(50vw - 6px) !important;
            height: calc(50vw - 6px) !important;
          }
        `}
      </style>
      {parsed && (
        <Fade in={parsed}>
          <div style={styles.container}>
            <div style={styles.leftColumn}>
              <div style={styles.leftTop}>
                <div
                  onClick={() => {
                    console.log("> All state", {
                      player,
                      side,
                      difficulty,
                      boardSize,
                      battle,
                      whoFirst,
                      currentState,
                      moves,
                      gameLog,
                      aiThinking,
                      aiResponse,
                      screenWriting,
                    });
                  }}
                >
                  <h1 style={{ fontSize: "2rem", fontStyle: "italic" }}>
                    {battle.name}
                  </h1>
                  <YTMusic />
                </div>
                <div
                  style={{
                    display: "flex",
                    alignItems: "center",
                    gap: "24px",
                  }}
                >
                  {[
                    {
                      label: battle.black,
                      type: "black",
                      img: "/swapgo/black.png",
                      value: "1",
                    },
                    {
                      label: battle.white,
                      type: "white",
                      img: "/swapgo/white.png",
                      value: "-1",
                    },
                  ].map((item) => (
                    <div
                      key={item.img}
                      style={{
                        display: "flex",
                        alignItems: "center",
                        gap: "4px",
                      }}
                    >
                      <img
                        src={item.img}
                        style={{ width: "20px", height: "20px" }}
                      />
                      <i>
                        {item.label}(
                        {side === item.value ? ` You, ${player}` : " AI"})
                      </i>
                    </div>
                  ))}
                </div>
              </div>
              <div style={styles.leftBottom}>
                {/* Ê£ãÁõ§ÁãÄÊÖã */}
                <div
                  style={{
                    padding: "4px 16px",
                    textAlign: "center",
                    position: "relative",
                  }}
                >
                  {gameLog.length > 0 && (
                    <span
                      style={{
                        position: "relative",
                        zIndex: 3,
                        display: "inline-block",
                        margin: "0 auto",
                        backdropFilter: "blur(5px)",
                        backgroundColor: "rgba(255, 255, 255, 0.5)",
                        border: "1px solid rgba(255, 255, 255, 0.18)",
                        borderRadius: "8px",
                        padding: "0 8px",
                        fontStyle: "italic",
                      }}
                    >
                      <i>
                        Round {currentState?.moveNumber}.{" "}
                        {gameLog[gameLog.length - 1]}
                      </i>
                    </span>
                  )}
                  <div
                    style={{
                      zIndex: 1,
                      position: "absolute",
                      top: 0,
                      left: 0,
                      background: "black",
                      width: aiResponse ? aiResponse?.black_win_rate : "50%",
                      height: "100%",
                      fontSize: "12px",
                      transition: "width 1s",
                    }}
                  ></div>
                  <div
                    style={{
                      zIndex: 1,
                      position: "absolute",
                      top: 0,
                      right: 0,
                      background: "white",
                      width: aiResponse ? aiResponse?.white_win_rate : "50%",
                      height: "100%",
                      display: "flex",
                      justifyContent: "flex-start",
                      alignItems: "center",
                      transition: "width 1s",
                    }}
                  >
                    <span
                      style={{
                        position: "relative",
                        zIndex: 999,
                        width: "30px",
                        margin: "-55px 0 0 -8px",
                        fontSize: "1rem",
                      }}
                    >
                      üö©
                    </span>
                  </div>
                </div>
                {/* Ê£ãÁõ§ */}
                <div
                  className="tenuki-board swap-go-board"
                  data-include-coordinates={true}
                />
                {/* ÈÅÆÁΩ© */}
                {aiThinking && (
                  <div
                    style={{
                      position: "absolute",
                      top: 0,
                      left: 0,
                      width: "100%",
                      height: "100%",
                      cursor: "not-allowed",
                      zIndex: 99,
                    }}
                  />
                )}
              </div>
            </div>
            <div style={styles.rightColumn}>
              {screenWriting.map((item, index) => {
                const randomRotate = Math.random() * 3 + 1;
                return (
                  <div
                    key={`screenWriting-${index}`}
                    style={{
                      zIndex: index,
                      position: "absolute",
                      height: "95%",
                      width: "95%",
                      top: "2.5%",
                      left: "2.5%",
                      borderRadius: "2px",
                      backgroundImage: `url(${item?.img}), linear-gradient(rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5)), url('/swapgo/background.png')`,
                      backgroundSize: "cover",
                      backgroundPosition: "center",
                      boxSize: "border-box",
                      display: "flex",
                      alignItems: "flex-end",
                      justifyContent: "center",
                      transform: `rotate(${index * 0.05}deg)`,
                      border: "2px solid #909090",
                      transform: `rotate(${
                        index === 0 ? "0" : randomRotate
                      }deg)`,
                      transition: "transform 0.5s",
                    }}
                  >
                    <div
                      style={{
                        padding: "16px",
                        fontSize: "14px",
                        width: "90%",
                        margin: "8px auto 8px auto",
                        backdropFilter: "blur(5px)",
                        backgroundColor: "rgba(255, 255, 255, 0.5)",
                        border: "1px solid rgba(255, 255, 255, 0.18)",
                        borderRadius: "8px",
                        fontStyle: "italic",
                      }}
                    >
                      <ReactTyped
                        strings={[`${item.description}`]}
                        typeSpeed={60}
                      />
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </Fade>
      )}
    </Layout>
  );
};

export default GO;

/** ËºîÂä©ÂáΩÂºè */
//
function convertArrayIndexToGoPosition(row, col, boardSize = 9) {
  const actualRow = boardSize - 1 - row;
  return [actualRow, col];
}
//ËΩâÊàêËã±ÊñáÂ∫ßÊ®ô
function convertMove(moveStr) {
  let col = moveStr.charCodeAt(0) - "A".charCodeAt(0);
  const row = 9 - parseInt(moveStr[1]);
  // ËôïÁêÜ 'I' ‰πãÂæåÁöÑÂ≠óÊØç
  if (col >= 8) {
    col = 8; // Ë∑≥ÈÅé 'I'
  }
  return [col, row];
}
//Ê£ãË≠úÁ¥ÄÈåÑ
const moveAccFunction = (moves = [], currentState) => {
  let result;
  if (currentState && currentState?.playedPoint) {
    result = [
      ...moves,
      {
        color: currentState.color,
        x: currentState.playedPoint.x,
        y: currentState.playedPoint.y,
      },
    ];
  } else {
    result = moves || [];
  }
  return result;
};
//Ê£ãË≠úÂúñÂÉèÂåñ
function visualizeGoBoard(intersections, size) {
  if (![9, 13, 19].includes(size)) {
    return "Invalid board size. Please use 9, 13, or 19.";
  }

  let board = "";
  const symbols = {
    empty: "‚ãÖ",
    black: "‚óè",
    white: "‚óã",
  };

  for (let y = 0; y < size; y++) {
    let row = "";
    for (let x = 0; x < size; x++) {
      const intersection = intersections.find((i) => i.x === x && i.y === y);
      row += symbols[intersection.value] + " ";
    }
    board += row.trim() + "\n";
  }

  return board;
}
//Èü≥Ê®ÇÂÖÉ‰ª∂
const YTMusic = () => {
  return (
    <div style={{ position: "absolute", zIndex: -9999 }}>
      <ReactPlayer
        url={
          "https://www.youtube.com/playlist?list=PLh4Eme5gACZFflgnk-qzmDGWroz2EIqi8"
        }
        width={320}
        height={180}
        volume={1}
        playsinline={true}
        playing={true}
        onPlay={(state) => {
          console.log(state);
        }}
      />
    </div>
  );
};

/**
 * 1. ÂèØ‰ª•ÈÅ∏Èõ£Â∫¶„ÄÅÈªëÁôΩÊñπ
 * 2. ‰∏ãÊ£ã Log„ÄÅÊê≠ÈÖçÊà∞ÂΩπÂäáÊÉÖÊñáÊ°à„ÄÅ‰∏ÄÈªë‰∏ÄÁôΩÊê≠ÈÖç‰∏ÄÂºµÂúñÁâá
 * 3. ‰æùÊìöÂãùÁéáË™øÊï¥Áà≠È¨• bar
 * 4. Â¢ûÂä†Èü≥Ê®Ç
 * Ë™ûË®ÄËΩâÊèõ
 * Ë®àÊôÇ„ÄÅÊï∏ÂÄº
 * ‰∏ªÂãïÊäïÈôçÔºåË®àÁÆó
 * Ë™ûÈü≥ÊúóËÆÄ
 * ÁâàÊ¨äËÅ≤Êòé
 * Onboarding
 * Export ÂäüËÉΩ
 */
